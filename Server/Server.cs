using database.Database;

namespace database.Server;

using database.Validation;
using database.Tokenizer;
using System.Net;
using System.Net.Sockets;
using System.Text;

public class Server
{
    readonly TcpListener _server;

    public Server(int port)
    {
        _server = new TcpListener(IPAddress.Any, port);
    }

    public void Start()
    {
        _server.Start();
        Console.WriteLine("Server started");
        string dsn = "/home/mario/applications/database/output.bin";
        // this loads the current ids and selects the current id as the
        // next auto generated id
        AutoGeneratedID.GetInstance().LoadIds(dsn);

        while (true)
        {
            TcpClient client = _server.AcceptTcpClient();
            Console.WriteLine("A connection has been made to the database");

            NetworkStream stream = client.GetStream();
                
            StreamWriter.Write(stream, "You are connected to the database" + Environment.NewLine);

            byte[] buffer = new byte[1024 * 1024 * 10];
            int bytesRead;
            while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
            {
                string command = new UTF8Encoding().GetString(buffer, 0, bytesRead);

                // validate the incoming request through a number of validators
                // this could be written to be more simple but want to be in the fancy world of OOP
                // for example, this could be just a simple function. 
                
                // If you need to extend the validation, just add another validator 
                try
                {
                    Validator validator = new Validator();
                    validator
                        .AddValidator(new InvalidNumberOfTokens(command))
                        .AddValidator(new InvalidOperation(command))
                        .AddValidator(new ReadIsInteger(command));
                
                    validator.Validate();
                }
                catch (ArgumentException e)
                {
                    StreamWriter.Write(stream, "Error: " + e.Message + "\r\n");
                }

                // create the token to determine if a request is either read or write
                Token token = new Tokenizer(command).Tokenize();
                // create the driver with the dsn string
                Driver driver = new Driver(dsn);
                
                // when we have a token, we can determine if the token is
                // either read or write
                if (token.GetTokenType() == "write")
                {
                    IWriter writer = driver.GetWriter();

                    writer.Write(token.GetTokenData());
                    
                    StreamWriter.Write(stream, "Success" + Environment.NewLine);
                } 
                else if (token.GetTokenType() == "read")
                {
                    IReader reader = driver.GetReader();

                    string value = reader.Read(token.GetTokenData());
                    
                    StreamWriter.Write(stream, value + Environment.NewLine);
                }
            }

            client.Close();
        }
    }

    public TcpListener GetServer()
    {
        return _server;
    }
}